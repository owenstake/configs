# Banner {{{
    echo '
         /      \ /  | /  | /  | /      \ /       \
         /$$$$$$  |$$ | $$ | $$ |/$$$$$$  |$$$$$$$  |
         $$ |  $$ |$$ | $$ | $$ |$$    $$ |$$ |  $$ |
         $$ \__$$ |$$ \_$$ \_$$ |$$$$$$$$/ $$ |  $$ |
         $$    $$/ $$   $$   $$/ $$       |$$ |  $$ |
          $$$$$$/   $$$$$/$$$$/   $$$$$$$/ $$/   $$/

    '
    echo "--------------------------------"
    echo "-- owen zsh config -------------"
    echo "--------------------------------"
# }}}

# Intro {{{
    # Just for my own notes / confirmation and to help anybody else, the ultimate order is .zshenv â†? [.zprofile if login] â†? [.zshrc if interactive] â†? [.zlogin if login] â†? [.zlogout sometimes].

    # manual config is needed to confirm and add to ~/.zshrc
    # export WINUSERNAME=zhuangyulin
# }}}

# Terminal settings {{{
    # setopt {{{
        setopt BSD_echo # for fix wired "echo ////" problem
        setopt braceccl # for use "vim {ac}file.c

        # fix history share in mutli panel
        setopt inc_append_history
        setopt share_history
    # }}}
# }}}

# Zplug manage plug {{{
    ## oh-my-zsh plugins # Supports oh-my-zsh plugins and the like
    ## config plugin
    if [[ -f ~/.zplug/init.zsh ]] {
      source ~/.zplug/init.zsh

      # oh-my-zsh inner option plugins
      zplug "plugins/git",   from:oh-my-zsh
      # zplug "plugins/z",   from:oh-my-zsh
      zplug "plugins/rand-quote",   from:oh-my-zsh
      zplug "plugins/themes",   from:oh-my-zsh
      zplug "plugins/gitignore",   from:oh-my-zsh
      zplug "plugins/cp",   from:oh-my-zsh
      zplug "plugins/extract",   from:oh-my-zsh
      zplug "plugins/zsh_reload",   from:oh-my-zsh
      zplug "plugins/safe-paste",   from:oh-my-zsh
      zplug "plugins/colored-man-pages",   from:oh-my-zsh
    # zplug "plugins/vi-mode",   from:oh-my-zsh    But I prefer this in emacs way
    # zplug "plugins/zsh-vim-mode",   from:oh-my-zsh
      zplug "plugins/history-substring-search",   from:oh-my-zsh

      # config plugs
      zplug "skywind3000/z.lua"
      zplug "zsh-users/zsh-syntax-highlighting"
      zplug "zsh-users/zsh-autosuggestions"
      zplug "supercrabtree/k"
      zplug "denisidoro/navi"
      zplug "MichaelAquilina/zsh-you-should-use"
      zplug "changyuheng/zsh-interactive-cd"
      zplug "SleepyBag/zsh-confer"

    # zplug "Powerlevel9k/powerlevel9k", from:github, as:theme, if:"[[ $ZSH_THEME_STYLE == 9k ]]"
    # zplug "denysdovhan/spaceship-prompt", use:spaceship.zsh-theme, from:github, as:theme, if:"[[ $ZSH_THEME_STYLE == spaceship ]]"
    # zplug "caiogondim/bullet-train.zsh", use:bullet-train.zsh-theme, from:github, as:theme, if:"[[ $ZSH_THEME_STYLE == bullet ]]"
    # zplug "skylerlee/zeta-zsh-theme", from:github, as:theme, if:"[[ $ZSH_THEME_STYLE == zeta ]]"

      # Install plugins if there are plugins that have not been installed
      if ! zplug check --verbose; then
          printf "Install? [y/N]: "
          if read -q; then
              echo; zplug install
          fi
      fi
      # Then, source plugins and add commands to $PATH
      zplug load
    } else {
        echo "Do not install zplug, please install!"
        echo "# curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh | zsh"
    }

    ## after plug loaded
    ## zsh-autosuggestions - note the source command must be at the end of .zshrc
    source "$ZPLUG_REPOS/zsh-users/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
# }}}

# Export {{{
    export EDITOR=vim   # For hjkl move

    # lua setting
    export RANGER_ZLUA=$ZLUA_SCRIPT
    export _ZL_ROOT_MARKERS=".git,.svn,.hg,.root,package.json"    # for `z -b` to return to root dir
    export _ZL_ECHO=1
# }}}

# Aliases ----------------------------------------- {{{

    # Basic alias{{{
        alias \
        ap='apropos' \
        rp='realpath' \
        vi='vim' \
        hi='history' \
        xc='xclip'   \
        fd='fdfind' \
        ra='ranger' \
        wt='curl -s "wttr.in/~Fu+Zhou+Fujian?m" | less' \
        lz='lazygit' \
        nb='newsboat -ru ~/.local/etc/newsboat/rss_links.txt' \
        pg='grep -P' \
        pac="vim ~/.local/etc/pac.txt" \
        vic='vim ~/.vimrc'   \
        pc='proxychains' \

    # }}}

    # zlua {{{
        # already define in z.lua
        # zz='z -i'  \
        # zf='z -I'  \
        # zb='z -b'  \
        # zbi='z -b -i'  \
        # zbf='z -b -I'  \
        # zh='z -I -t .'  \
        # zzc='zz -c' \

        alias \
        zi='z -i' \
        zl='z -l' \

        zc='z -c'  \
        zcl='z -c -l' \
        zcf='z -c -I' \
        zch='z -c -I -t .'  \
    # }}}

    # tar .tgz alias {{{
        alias tarc='tar -czvf'
        alias tarl='tar -tf'
        alias tarx='tar -xzvf'
    # }}}

    # LukeSmith - Verbosity and settings that you pretty much just always are going to want.{{{
        alias \
        cp='cp -iv' \
        df='df -h' \
        rm='rm -vI' \
        mkd="mkdir -pv" \
    # }}}

    # Git Alias - ref - liaoxuefeng {{{
        git config --global alias.st status
        git config --global alias.co checkout
        git config --global alias.ci commit
        git config --global alias.br branch
        git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
        git config --global color.ui true
        alias gla='git log --oneline --decorate --all --graph'
    # }}}

    # Zsh config{{{
        alias zshc="vim ~/.zshrc"
        alias zshs="source ~/.zshrc"
    # }}}

    # Tmux alias {{{
        alias \
        ta='tmux a' \
        tn='tmux new -t' \
        tk='tmux kill-session -t' \
        tls='tmux ls' \
        tat='tmux a -t' \
        tmuxc='vim ~/.tmux.conf' \
        tmuxs='tmux source ~/.tmux.conf' \
    # }}}

# }}}

# Key Map for terminal ----------------- {{{
    # Oh-My-Zsh {{{
        ## ref - https://www.zhihu.com/question/49284484
        bindkey '^P' history-substring-search-up
        bindkey '^N' history-substring-search-down
        bindkey ',' autosuggest-accept
        bindkey \^U backward-kill-line
    # }}}

    # FZF key binding {{{
        # what we expect is `   sort -t\| -gr -k2 /home/z/.z | awk -F\| "{print \$1}"   `
        # Because here the cmd will be subtituded twice, so we need to take care of escape.
        # Double quote can be nest while single quote cant. we must use escape to take care of quote matching
        # https://stackoverflow.com/questions/6697753/difference-between-single-and-double-quotes-in-bash/42082956#42082956
        # FZF
        export FZF_CTRL_T_OPTS=" --bind   \
            \"ctrl-t:reload(sort -t\\\\| -gr -k2 ~/.zlua | awk -F\\\\| \\\"{print \\\\\$1}\\\")\"   \
            "
            # \"ctrl-r:reload(sort -t\\\\| -gr -k2 ~/.zlua | awk -F\\\\| \\\"{print \\\\\$1}\\\")\"   \
        # export FZF_CTRL_T_OPTS="--bind \"ctrl-t:reload(sort -t\\\\| -gr -k2 ~/.zlua | awk -F\\\\| \\\"{print \\\\\$1}\\\")\""  #FZF
        # what we expect is `   sort -t\| -gr -k2 /home/z/.z | awk -F\| '{print $1}'   `
        # export FZF_CTRL_T_OPTS="--bind \"ctrl-t:reload(sort -t\\\\| -gr -k2 /home/z/.z | awk -F\\\\| '{print \\\$1}')\""
    # }}}
# }}}

# Tmux config in fzf way - now is rarely used {{{
    # https://github.com/junegunn/fzf/wiki/examples#tmux
    # it does not well done, because mask the auto-complete in the dafault shell
    # zsh; needs setopt re_match_pcre. You can, of course, adapt it to your own shell easily.
    function tmk () {
        local sessions
        sessions="$(tmux ls|fzf --exit-0 --multi)"  || return $?
        local i
        for i in "${(f@)sessions}"
        do
            [[ $i =~ '([^:]*):.*' ]] && {
                echo "Killing $match[1]"
                tmux kill-session -t "$match[1]"
            }
        done
    }

    # tm - create new tmux session, or switch to existing one. Works from within tmux too. (@bag-man)
    # `tm` will allow you to select your tmux session via fzf.
    # `tm irc` will attach to the irc session (if it exists), else it will create it.
    function tm() {
      [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
      if [ $1 ]; then
        tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1"); return
      fi
      session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
    }
# }}}

# WSL config {{{
    # Fix xclip, so we can copy between win10 and linux.
    # Xclip depends on x11 on linux and Xserver on win10.
    # To make xclip works on vim, we also need install vim-gtk
    if [ $(uname -r | grep -i "microsof") ]; then
        echo "we are in wsl~~~"

        # Export for WSL {{{
            # sys tools
            export POWERSHELL_PATH="/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powerShell.exe"
            export VSCODE_PATH="/mnt/c/Users/$WINUSERNAME/AppData/Local/Programs/Microsoft\ VS\ Code/bin/code"

            # network
            export WSLIP=${WSLIP:-192.168.50.1}
            export WINIP=${WINIP:-192.168.50.10}
            export all_proxy="socks5://$WINIP:10808" # v2ray
            export DISPLAY="$WINIP:0.0"              # For X11 server, so we can xclip.
        # }}}

        # Alias for WSL {{{
            alias \
            cmd="cmd.exe /C start " \
            exp="explorer.exe" \
            code="$VSCODE_PATH" \
            wpwd="wslpath -w $(pwd)" \
            wslp=wslpath \
            winp="wslpath -w" \
            psh="$POWERSHELL_PATH" \
            ty="/mnt/c/Program\ Files/Typora/Typora.exe" \
            chrome=explorer.exe /mnt/c/Users/zhuangyulin/Desktop/software/chrome.lnk \
        # }}}
      
        # Network - init when WSL starting {{{
            if [ ! -f /mnt/wsl/.wsl_started ]; then 
                echo "WSL starting~~~"
                $POWERSHELL_PATH -File 'D:\.local\win10\init-wsl.ps1' $WSLIP $WINIP           # etc/win10/init-wsl.ps1
                touch /mnt/wsl/.wsl_started    # tmpfs /mnt/wsl
            else
                echo "WSL already started~~~"
            fi
        # }}}

        # Key map - AHK key map for Win10{{{
            explorer.exe "D:\.local\win10\keyremap.ahk"                                           # etc/win10/keyremap.ahk
        # }}}

        # Function for WSL {{{
            # system control{{{
                function reboot() {
                    printf 'Reboot? [y/N]: ' 
                    if read -q; then 
                        echo;  
                        $POWERSHELL_PATH wsl --shutdown 
                    fi
                }
            # }}}

            # droplist - manipulate win10 droplist (win10 clipboard) {{{
                function yw() {
                    local yw_array=()
                    for var in "$@"
                    do
                        tmppath=$(wslpath -wa $var)
                        yw_array+=("$tmppath")
                    done
                    $POWERSHELL_PATH -File 'D:\.local\win10\file2clip.ps1' "$yw_array[@]"         # etc/win10/file2clip.ps1
                }
                function yww() {
                    local yw_array=()
                    for var in "$@"
                    do
                        tmppath=$(wslpath -wa $var)
                        yw_array+=("$tmppath")
                    done
                    $POWERSHELL_PATH -File 'D:\.local\win10\file2clip.ps1' "$yw_array[@]"         # etc/win10/file2clip.ps1
                }
                function ywa() {
                    local yw_array=()
                    for var in "$@"
                    do
                        tmppath=$(wslpath -wa $var)
                        yw_array+=("$tmppath")
                    done
                    $POWERSHELL_PATH -File 'D:\.local\win10\file2clip-append.ps1' "$yw_array[@]"  # etc/win10/file2clip-append.ps1
                }
                function pw() {
                    DesDirPath=$(wslpath -wa $DesDirPath)  # if [ -z $1 ]; then DesDirPath='.'; else DesDirPath="$1"; fi; DesDirPath=$(wslpath -wa $DesDirPath)
                    $POWERSHELL_PATH -File 'D:\.local\win10\clip2file.ps1' "$DesDirPath"          # etc/win10/clip2file.ps1
                }
                function pww() {
                    DesDirPath=$(wslpath -wa ${1:-.})
                    $POWERSHELL_PATH -File 'D:\.local\win10\clip2file.ps1' "$DesDirPath"          # etc/win10/clip2file.ps1
                }
                function pwm() {
                    DesDirPath=$(wslpath -wa ${1:-.})
                    $POWERSHELL_PATH -File 'D:\.local\win10\mv-clip2file.ps1' "$DesDirPath"       # etc/win10/mv-clip2file.ps1
                }
                function pwl() {
                    DesDirPath=$(wslpath -wa ${1:-.})
                    $POWERSHELL_PATH -File 'D:\.local\win10\set-shortcut-from-clipboard.ps1' "$DesDirPath"  # etc/win10/set-shortcut-from-clipboard.ps1
                }
                function musb {
                    sudo mkdir /mnt/$1
                    sudo mount -t drvfs $1: /mnt/$1
                }
                function wcd() {
                    local tmppath=\'$*\'
                    echo $tmppath
                    cd $(wslpath "$*")
                }
            # }}}
        # }}}
    fi
# }}}

# FZF - https://github.com/junegunn/fzf#using-git {{{
    [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
# }}}
